<launch>
    <!-- Frame Params -->
    <arg name="base_frame" default="base_link"/>
    <arg name="odom_frame" default="base_link"/>
    <arg name="map_frame" default="map"/>

    <!-- Control Params -->
    <arg name="ctrl_odom_topic" default="/scanmatch_odom"/>
    <arg name="enable_controller" default="true"/>
    <arg name="enable_record" default="true"/>

    <!-- Lidar Params -->
    <arg name="pointcld_topic" default="ouster/points"/>
    <arg name="scan_topic" default="front/scan"/>

    <!-- Hector Params -->
    <arg name="map_size" default="511"/>
    <arg name="map_start_x" default="0.5"/>
    <arg name="map_start_y" default="0.5"/>

    <!-- Pointcloud to laser scan -->
    <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pcl2scan" output="screen">
        <remap from="cloud_in" to="$(arg pointcld_topic)" />
        <remap from="scan" to="$(arg scan_topic)" />
        <rosparam>
                target_frame: os_sensor # Leave disabled to output scan in pointcloud frame
                transform_tolerance: 0.01
                min_height: -0.10
                max_height: 0.10

                angle_min: -3.141 # -M_PI
                angle_max: 3.141  # M_PI
                angle_increment: 0.0061359 # M_PI/512
                scan_time: 0.05
                range_min: 0.29
                range_max: 90.01
                use_inf: true
                inf_epsilon: 1.0
        </rosparam>
    </node>

    <!-- <node pkg="erl_sdf_mapping" type="erl_sdf_mapping_node" name="erl_sdf_mapping_node"  output="log">
        <param name="frequency" value="50.0"/>
        <param name="visualize_quadtree" value="false"/>
        <param name="visualize_frequency_divider" value="1"/>
        <param name="lidar_frame_name" value="os_sensor"/>
        <param name="surface_mapping_config_path" value="$(find erl_sdf_mapping)/config/surface_mapping.yaml"/>
        <param name="sdf_mapping_config_path" value="$(find erl_sdf_mapping)/config/sdf_mapping.yaml"/>
        <param name="visualize_quadtree_config_path" value="$(find erl_sdf_mapping)/config/visualize_quadtree.yaml"/>
    </node> -->

    <node name="erl_astar_ros" pkg="erl_astar_ros" type="erl_astar_2d_online_node" output="log" launch-prefix="">
        <param name="inflation_value" value="0.25"/>
        <param name="planning_frame" value="$(arg map_frame)" />
        <param name="plan_freq" value="40.0"/>
        <param name="odom_topic" value="$(arg ctrl_odom_topic)"/>
        <param name="path_topic" value="/path"/>
        <param name="map_topic" value="/map"/>
        <param name="goal_topic" value="/move_base_simple/goal"/>
    </node>

    <node pkg="hector_mapping" type="hector_mapping" name="hector_mapping" output="screen">
        <!-- Frame names -->
        <param name="map_frame" value="$(arg map_frame)" />
        <param name="base_frame" value="$(arg base_frame)" />
        <param name="odom_frame" value="$(arg odom_frame)" />

        <!-- Tf use -->
        <param name="use_tf_scan_transformation" value="false"/>
        <param name="use_tf_pose_start_estimate" value="false"/>
        <param name="pub_map_odom_transform" value="true"/>

        <!-- we can use this odom as localization -->
        <param name="pub_odometry" value="true"/>

        <!-- Map size / start point -->
        <param name="map_resolution" value="0.1"/>
        <param name="map_size" value="$(arg map_size)"/>
        <param name="map_size_x" value="$(arg map_size)"/>
        <param name="map_size_y" value="$(arg map_size)"/>
        <!-- put map origin to grid center full range is [0, 1] X [0, 1] -->
        <param name="map_start_x" value="$(arg map_start_x)"/>
        <param name="map_start_y" value="$(arg map_start_y)" />
        <param name="map_multi_res_levels" value="4" />

        <!-- Map update parameters -->
        <param name="update_factor_free" value="0.4"/>
        <param name="update_factor_occupied" value="0.9" />
        <param name="map_update_distance_thresh" value="0.2"/>
        <param name="map_update_angle_thresh" value="0.9" />
        <param name="laser_z_min_value" value = "-1.0" />
        <param name="laser_z_max_value" value = "1.0" />
        <param name="laser_max_dist" value = "90.0" />
        <param name="laser_min_dist" value = "0.29" />
        <param name="map_pub_period" value = "0.025" />

        <!-- Advertising config -->
        <param name="advertise_map_service" value="true"/>
        <param name="scan_subscriber_queue_size" value="5"/>
        <param name="scan_topic" value="$(arg scan_topic)"/>
    </node>

    <node pkg="ref_gvn_lite" type="ref_gvn_lite_node.py" name="ref_gvn_lite" output="screen">
        <param name="display_nav_path" value="true"/>
        <param name="odom_topic" value="$(arg ctrl_odom_topic)"/>
        <param name="path_topic" value="/path"/>
        <param name="radius_topic" value="/sdf_val"/>
        <param name="gvn_restart_topic" value="/gvn_restart"/>
        <param name="ctrl_freq" value="50.0"/>
        <param name="kg" value="2.0"/>
    </node>

    <group if="$(arg enable_controller)" >
    <!--- Run cone controller as low level velocity controller -->
    <node pkg="erl_clf_cbf_controller" type="clf_cbf_controller_node.py" name="clf_cbf_controller"  output="screen">
        <param name="odom_topic" value="$(arg ctrl_odom_topic)"/>
        <param name="path_topic" value="/path"/>
        <param name="goal_topic" value="/ref_gvn_lite/local_goal"/>
        <param name="ctrl_freq" value="100.0"/>
        <!-- Control limits are set as the same as in control.yaml in jackal_control package -->
        <!-- linear velocity limit m/sec-->
        <param name="v_min" value="-2.0"/>
        <param name="v_max" value="2.0"/>
        <!-- angular velocity limit rad/sec-->
        <param name="w_min" value="-2.0"/>
        <param name="w_max" value="2.0"/>
    </node>
    </group >

    <!-- <node pkg="rosbag" type="record" name="rosbag_record" output="screen" args="record -x '(.*)ouster(.*)' -a -o /media/usb0/ros_data/clf_cbf_sdf_sep_28"/> -->
        
    <node name="emergency_stop" pkg="stop_now" type="stop_now_node.py" output="screen">
        <rosparam command="load" file="$(find stop_now)/config/default.yaml" />
    </node>

<!--     <group if="$(arg enable_record)" > -->
<!--         <node pkg="rosbag" type="record" name="rosbag_record" output="screen" args="record -x '(.*)ouster(.*)' -a -o /media/usb0/ros_data/lab_clf_cbf_jan_3"/> -->
<!--     </group > -->
</launch>
